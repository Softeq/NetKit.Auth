@model Softeq.NetKit.Auth.Web.Models.Request.ResetPasswordRequestModel

@section Styles
{
    <style>
        small.error {
            color: red;
        }
    </style>
}

<div class="container">
    <div class="row justify-content-center pt-5">
        <div class="col-4">
            <div id="resetPasswordForm">
                <h2 class="mb-4">Change Password</h2>

                @using (Html.BeginForm("ResetPassword", "Account", FormMethod.Post, new { id = "form" }))
                {
                    @Html.HiddenFor(model => model.Code)

                    <div class="form-group">
                        @Html.LabelFor(model => model.Password)
                        @Html.PasswordFor(x => x.Password, new { id = "txtPassword", placeholder = "Enter password", @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ConfirmPassword, "Confirm Password")
                        @Html.PasswordFor(x => x.ConfirmPassword, new { id = "confirmPassword", placeholder = "Enter confirm password", @class = "form-control" })
                    </div>

                    <button type="button" class="btn btn-primary btn-block" id="btnSave">Save</button>

                    <div class="alert alert-danger mt-3 d-none" id="errorArea"></div>
                }
            </div>
        </div>
    </div>
</div>

<div class="container d-none" id="changedPasswordBlock">
    <div class="row justify-content-center pt-5">
        <div class="col-4">
            <h2 class="mb-4">Change Password</h2>
            <p>Success! Your password has been changed.</p>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
            $(document).ready(function () {
                $.validator.methods.passwordRegex = function(value, element, regex) {
                    return this.optional(element) || regex.test(value);
                }

                $('#form').validate({
                    rules: {
                        Password: {
                            required: true,                           
                            minlength: 8,
                            maxlength: 20,
                            passwordRegex: /^.*([\d|A-Z|`~!#$@@%^&*()?{}[\]_-]+).*$/
                        },
                        ConfirmPassword: {
                            required: true,
                            equalTo: "#txtPassword"
                        }
                    },
                    messages: {
                        Password: {
                            required: "Cannot be blank",                           
                            minlength: "Must have at least 8 characters",
                            maxlength: "Must have up to 20 characters",
                            passwordRegex: "Must have at least 1 Uppercase letter, number or special character"
                        },
                        ConfirmPassword: {
                            required: "Cannot be blank",
                            equalTo: "Passwords don't match"
                        }
                    },
                    errorElement: "small"
                });

                var formUrl = $("#form").attr('action');

                $('#txtPassword').on('blur keyup change', resetBtnSaveState);
                $('#confirmPassword').on('blur keyup change', resetBtnSaveState);

                function resetBtnSaveState() {
                    if ($("#form").valid()) {
                        $('#btnSave').prop('disabled', false);
                    } else {
                        $('#btnSave').prop('disabled', true);
                    }
                }

                function showErrors(errors, errorMessagePropertyName) {
                    if (errors.length > 1) {
                        $('#errorArea').append('<ul></ul>');

                        errors.forEach(function(error) {
                            if (error[errorMessagePropertyName] != null) {
                                $('#errorArea ul').append(
                                    $('<li>').append(
                                        $('<small>').text(error[errorMessagePropertyName])
                                    )
                                );
                            }
                        });
                    } else {
                        $("#errorArea")
                            .append($('<small>').text(errors[0][errorMessagePropertyName]));
                    }
                }

                function setInputsEnabledState(state) {
                    $('#btnSave').prop("disabled", !state);
                    $('#txtPassword').prop("disabled", !state);
                    $('#confirmPassword').prop("disabled", !state);
                }

                $("#btnSave").click(function() {
                    if (!$("#form").valid()) {
                        resetBtnSaveState();
                        return;
                    }
                    var sendData = $("#form").serialize();

                    setInputsEnabledState(false);

                    $.post(formUrl, sendData)
                        .done(function() {
                            $('#resetPasswordForm').remove();
                            $('#changedPasswordBlock').removeClass("d-none");
                        })
                        .fail(function(data) {
                            $('#errorArea').empty();
                            $('#errorArea').removeClass("d-none");

                            if (data.responseJSON != null) {
                                if (data.responseJSON.ValidationErrors != null) {
                                    showErrors(data.responseJSON.ValidationErrors, "Message");
                                } else {
                                    if (data.responseJSON.identityErrors != null) {
                                        showErrors(data.responseJSON.identityErrors, "message");
                                    } else {
                                        if (data.responseJSON.message != null) {
                                            $("#errorArea").append(
                                                $('<small>').text(data.responseJSON.message));
                                        } else if (data.responseJSON.Message != null) {
                                            $("#errorArea").append(
                                                $('<small>').text(data.responseJSON.Message));
                                        } else {
                                            $("#errorArea").append(
                                                $('<small>')
                                                .text("Couldn't save password. Please try again or contact support."));
                                        }
                                    }
                                }
                            } else {
                                $("#errorArea").append(
                                    $('<small>').text("Couldn't save password. Please try again or contact support."));
                            }

                            setInputsEnabledState(true);
                        });
                });
            });
    </script>
}